{
  "{\"sourceRoot\":\"/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering\",\"filename\":\"/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering\",\"plugins\":[],\"presets\":[]}:7.1.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering",
      "filename": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nimport plugins from 'gulp-load-plugins';\nimport yargs from 'yargs';\nimport browser from 'browser-sync';\nimport gulp from 'gulp';\nimport panini from 'panini';\nimport rimraf from 'rimraf';\nimport sherpa from 'style-sherpa';\nimport yaml from 'js-yaml';\nimport fs from 'fs';\nimport webpackStream from 'webpack-stream';\nimport webpack2 from 'webpack';\nimport named from 'vinyl-named';\nimport uncss from 'uncss';\nimport autoprefixer from 'autoprefixer'; // Load all Gulp plugins into one variable\n\nconst $ = plugins(); // Check for --production flag\n\nconst PRODUCTION = !!yargs.argv.production; // Load settings from settings.yml\n\nconst {\n  COMPATIBILITY,\n  PORT,\n  UNCSS_OPTIONS,\n  PATHS\n} = loadConfig();\n\nfunction loadConfig() {\n  let ymlFile = fs.readFileSync('config.yml', 'utf8');\n  return yaml.load(ymlFile);\n} // Build the \"dist\" folder by running all of the below tasks\n// Sass must be run later so UnCSS can search for used classes in the others assets.\n\n\ngulp.task('build', gulp.series(clean, gulp.parallel(pages, javascript, images, copy), sass, styleGuide)); // Build the site, run the server, and watch for file changes\n\ngulp.task('default', gulp.series('build', server, watch)); // Delete the \"dist\" folder\n// This happens every time a build starts\n\nfunction clean(done) {\n  rimraf(PATHS.dist, done);\n} // Copy files out of the assets folder\n// This task skips over the \"img\", \"js\", and \"scss\" folders, which are parsed separately\n\n\nfunction copy() {\n  return gulp.src(PATHS.assets).pipe(gulp.dest(PATHS.dist + '/assets'));\n} // Copy page templates into finished HTML files\n\n\nfunction pages() {\n  return gulp.src('src/pages/**/*.{html,hbs,handlebars}').pipe(panini({\n    root: 'src/pages/',\n    layouts: 'src/layouts/',\n    partials: 'src/partials/',\n    data: 'src/data/',\n    helpers: 'src/helpers/'\n  })).pipe(gulp.dest(PATHS.dist));\n} // Load updated HTML templates and partials into Panini\n\n\nfunction resetPages(done) {\n  panini.refresh();\n  done();\n} // Generate a style guide from the Markdown content and HTML template in styleguide/\n\n\nfunction styleGuide(done) {\n  sherpa('src/styleguide/index.md', {\n    output: PATHS.dist + '/styleguide.html',\n    template: 'src/styleguide/template.html'\n  }, done);\n} // Compile Sass into CSS\n// In production, the CSS is compressed\n\n\nfunction sass() {\n  const postCssPlugins = [// Autoprefixer\n  autoprefixer({\n    browsers: COMPATIBILITY\n  })].filter(Boolean);\n  return gulp.src('src/assets/scss/app.scss').pipe($.sourcemaps.init()).pipe($.sass({\n    includePaths: PATHS.sass\n  }).on('error', $.sass.logError)).pipe($.postcss(postCssPlugins)).pipe($.if(PRODUCTION, $.cleanCss({\n    compatibility: 'ie9'\n  }))).pipe($.if(!PRODUCTION, $.sourcemaps.write())).pipe(gulp.dest(PATHS.dist + '/assets/css')).pipe(browser.reload({\n    stream: true\n  }));\n}\n\nlet webpackConfig = {\n  mode: PRODUCTION ? 'production' : 'development',\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [\"@babel/preset-env\"],\n          compact: false\n        }\n      }\n    }]\n  },\n  devtool: !PRODUCTION && 'source-map' // Combine JavaScript into one file\n  // In production, the file is minified\n\n};\n\nfunction javascript() {\n  return gulp.src(PATHS.entries).pipe(named()).pipe($.sourcemaps.init()).pipe(webpackStream(webpackConfig, webpack2)).pipe($.if(PRODUCTION, $.uglify().on('error', e => {\n    console.log(e);\n  }))).pipe($.if(!PRODUCTION, $.sourcemaps.write())).pipe(gulp.dest(PATHS.dist + '/assets/js'));\n} // Copy images to the \"dist\" folder\n// In production, the images are compressed\n\n\nfunction images() {\n  return gulp.src('src/assets/img/**/*').pipe($.if(PRODUCTION, $.imagemin([$.imagemin.jpegtran({\n    progressive: true\n  })]))).pipe(gulp.dest(PATHS.dist + '/assets/img'));\n} // Start a server with BrowserSync to preview the site in\n\n\nfunction server(done) {\n  browser.init({\n    server: PATHS.dist,\n    port: PORT\n  }, done);\n} // Reload the browser with BrowserSync\n\n\nfunction reload(done) {\n  browser.reload();\n  done();\n} // Watch for changes to static assets, pages, Sass, and JavaScript\n\n\nfunction watch() {\n  gulp.watch(PATHS.assets, copy);\n  gulp.watch('src/pages/**/*.html').on('all', gulp.series(pages, browser.reload));\n  gulp.watch('src/{layouts,partials}/**/*.html').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/data/**/*.{js,json,yml}').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/helpers/**/*.js').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/assets/scss/**/*.scss').on('all', sass);\n  gulp.watch('src/assets/js/**/*.js').on('all', gulp.series(javascript, browser.reload));\n  gulp.watch('src/assets/img/**/*').on('all', gulp.series(images, browser.reload));\n  gulp.watch('src/styleguide/**').on('all', gulp.series(styleGuide, browser.reload));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "plugins",
        "yargs",
        "browser",
        "gulp",
        "panini",
        "rimraf",
        "sherpa",
        "yaml",
        "fs",
        "webpackStream",
        "webpack2",
        "named",
        "uncss",
        "autoprefixer",
        "$",
        "PRODUCTION",
        "argv",
        "production",
        "COMPATIBILITY",
        "PORT",
        "UNCSS_OPTIONS",
        "PATHS",
        "loadConfig",
        "ymlFile",
        "readFileSync",
        "load",
        "task",
        "series",
        "clean",
        "parallel",
        "pages",
        "javascript",
        "images",
        "copy",
        "sass",
        "styleGuide",
        "server",
        "watch",
        "done",
        "dist",
        "src",
        "assets",
        "pipe",
        "dest",
        "root",
        "layouts",
        "partials",
        "data",
        "helpers",
        "resetPages",
        "refresh",
        "output",
        "template",
        "postCssPlugins",
        "browsers",
        "filter",
        "Boolean",
        "sourcemaps",
        "init",
        "includePaths",
        "on",
        "logError",
        "postcss",
        "if",
        "cleanCss",
        "compatibility",
        "write",
        "reload",
        "stream",
        "webpackConfig",
        "mode",
        "module",
        "rules",
        "test",
        "use",
        "loader",
        "options",
        "presets",
        "compact",
        "devtool",
        "entries",
        "uglify",
        "e",
        "console",
        "log",
        "imagemin",
        "jpegtran",
        "progressive",
        "port"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/markvolmer/Documents/Projects/GlazeneeringGitFlowTest/Glazeneering",
      "sourcesContent": [
        "'use strict';\n\nimport plugins       from 'gulp-load-plugins';\nimport yargs         from 'yargs';\nimport browser       from 'browser-sync';\nimport gulp          from 'gulp';\nimport panini        from 'panini';\nimport rimraf        from 'rimraf';\nimport sherpa        from 'style-sherpa';\nimport yaml          from 'js-yaml';\nimport fs            from 'fs';\nimport webpackStream from 'webpack-stream';\nimport webpack2      from 'webpack';\nimport named         from 'vinyl-named';\nimport uncss         from 'uncss';\nimport autoprefixer  from 'autoprefixer';\n\n// Load all Gulp plugins into one variable\nconst $ = plugins();\n\n// Check for --production flag\nconst PRODUCTION = !!(yargs.argv.production);\n\n// Load settings from settings.yml\nconst { COMPATIBILITY, PORT, UNCSS_OPTIONS, PATHS } = loadConfig();\n\nfunction loadConfig() {\n  let ymlFile = fs.readFileSync('config.yml', 'utf8');\n  return yaml.load(ymlFile);\n}\n\n// Build the \"dist\" folder by running all of the below tasks\n// Sass must be run later so UnCSS can search for used classes in the others assets.\ngulp.task('build',\n gulp.series(clean, gulp.parallel(pages, javascript, images, copy), sass, styleGuide));\n\n// Build the site, run the server, and watch for file changes\ngulp.task('default',\n  gulp.series('build', server, watch));\n\n// Delete the \"dist\" folder\n// This happens every time a build starts\nfunction clean(done) {\n  rimraf(PATHS.dist, done);\n}\n\n// Copy files out of the assets folder\n// This task skips over the \"img\", \"js\", and \"scss\" folders, which are parsed separately\nfunction copy() {\n  return gulp.src(PATHS.assets)\n    .pipe(gulp.dest(PATHS.dist + '/assets'));\n}\n\n// Copy page templates into finished HTML files\nfunction pages() {\n  return gulp.src('src/pages/**/*.{html,hbs,handlebars}')\n    .pipe(panini({\n      root: 'src/pages/',\n      layouts: 'src/layouts/',\n      partials: 'src/partials/',\n      data: 'src/data/',\n      helpers: 'src/helpers/'\n    }))\n    .pipe(gulp.dest(PATHS.dist));\n}\n\n// Load updated HTML templates and partials into Panini\nfunction resetPages(done) {\n  panini.refresh();\n  done();\n}\n\n// Generate a style guide from the Markdown content and HTML template in styleguide/\nfunction styleGuide(done) {\n  sherpa('src/styleguide/index.md', {\n    output: PATHS.dist + '/styleguide.html',\n    template: 'src/styleguide/template.html'\n  }, done);\n}\n\n// Compile Sass into CSS\n// In production, the CSS is compressed\nfunction sass() {\n\n  const postCssPlugins = [\n    // Autoprefixer\n    autoprefixer({ browsers: COMPATIBILITY }),\n\n    // UnCSS - Uncomment to remove unused styles in production\n    // PRODUCTION && uncss.postcssPlugin(UNCSS_OPTIONS),\n  ].filter(Boolean);\n\n  return gulp.src('src/assets/scss/app.scss')\n    .pipe($.sourcemaps.init())\n    .pipe($.sass({\n      includePaths: PATHS.sass\n    })\n      .on('error', $.sass.logError))\n    .pipe($.postcss(postCssPlugins))\n    .pipe($.if(PRODUCTION, $.cleanCss({ compatibility: 'ie9' })))\n    .pipe($.if(!PRODUCTION, $.sourcemaps.write()))\n    .pipe(gulp.dest(PATHS.dist + '/assets/css'))\n    .pipe(browser.reload({ stream: true }));\n}\n\nlet webpackConfig = {\n  mode: (PRODUCTION ? 'production' : 'development'),\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [ \"@babel/preset-env\" ],\n            compact: false\n          }\n        }\n      }\n    ]\n  },\n  devtool: !PRODUCTION && 'source-map'\n}\n\n// Combine JavaScript into one file\n// In production, the file is minified\nfunction javascript() {\n  return gulp.src(PATHS.entries)\n    .pipe(named())\n    .pipe($.sourcemaps.init())\n    .pipe(webpackStream(webpackConfig, webpack2))\n    .pipe($.if(PRODUCTION, $.uglify()\n      .on('error', e => { console.log(e); })\n    ))\n    .pipe($.if(!PRODUCTION, $.sourcemaps.write()))\n    .pipe(gulp.dest(PATHS.dist + '/assets/js'));\n}\n\n// Copy images to the \"dist\" folder\n// In production, the images are compressed\nfunction images() {\n  return gulp.src('src/assets/img/**/*')\n    .pipe($.if(PRODUCTION, $.imagemin([\n      $.imagemin.jpegtran({ progressive: true }),\n    ])))\n    .pipe(gulp.dest(PATHS.dist + '/assets/img'));\n}\n\n// Start a server with BrowserSync to preview the site in\nfunction server(done) {\n  browser.init({\n    server: PATHS.dist, port: PORT\n  }, done);\n}\n\n// Reload the browser with BrowserSync\nfunction reload(done) {\n  browser.reload();\n  done();\n}\n\n// Watch for changes to static assets, pages, Sass, and JavaScript\nfunction watch() {\n  gulp.watch(PATHS.assets, copy);\n  gulp.watch('src/pages/**/*.html').on('all', gulp.series(pages, browser.reload));\n  gulp.watch('src/{layouts,partials}/**/*.html').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/data/**/*.{js,json,yml}').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/helpers/**/*.js').on('all', gulp.series(resetPages, pages, browser.reload));\n  gulp.watch('src/assets/scss/**/*.scss').on('all', sass);\n  gulp.watch('src/assets/js/**/*.js').on('all', gulp.series(javascript, browser.reload));\n  gulp.watch('src/assets/img/**/*').on('all', gulp.series(images, browser.reload));\n  gulp.watch('src/styleguide/**').on('all', gulp.series(styleGuide, browser.reload));\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1543575082395
  }
}